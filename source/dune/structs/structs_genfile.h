/* duneloader genfile private fn prototypes */

#pragma once

#include "intern/structs_utils.h"

struct SDNA;

/* TypesStr contains the prebuilt Types struct defining the layouts of the types
 * used by this version of Dune. It is defined in a file dna.c, which is
 * generated by the makestypes program during the build process (see makestypes.c). */
extern const unsigned char TypesStr[];
/* Length of TypesStr. */
extern const int TypesLen;

/* Primitive (non-struct, non-ptr/fn/array) types,
 * Don't change these vals!
 * Currently changes here will work on native endianness,
 * however types_struct_switch_endian currently checks these
 * hard-coded vals against those from old files. */
typedef enum eS_Type {
  S_TYPE_CHAR = 0,
  S_TYPE_UCHAR = 1,
  S_TYPE_SHORT = 2,
  S_TYPE_USHORT = 3,
  S_TYPE_INT = 4,
  /* S_TYPE_LONG     = 5, */ /* deprecated (use as int) */
  /* S_TYPE_ULONG    = 6, */ /* deprecated (use as int) */
  S_TYPE_FLOAT = 7,
  S_TYPE_DOUBLE = 8,
/* ,S_TYPE_VOID = 9 */
/* define so switch statements don't complain */
#define S_TYPE_VOID 9
  S_TYPE_INT64 = 10,
  S_TYPE_UINT64 = 11,
  S_TYPE_INT8 = 12,
} eS_Type;

/* For use with types_struct_reconstruct & types_struct_get_cmpflags */
enum eSTypes_StructCompare {
  /* Struct has disappeared
   * (vals of this struct type will not be loaded by the current Dune) */
  STYPES_CMP_REMOVED = 0,
  /* Struct is the same
   * (can be loaded with straight memory copy after any necessary endian conversion) */
  STYPES_CMP_EQUAL = 1,
  /* Struct is different in some way
   * (needs to be copied/converted field by field) */
  STYPES_CMP_NOT_EQUAL = 2,
  /* This is only used temporarily by #types_struct_get_cmpflags. */
  STYPES_CMP_UNKNOWN = 3,
};

/**
 * Constructs and returns a decoded SDNA structure from the given encoded SDNA data block.
 */
struct SDNA *DNA_sdna_from_data(const void *data,
                                int data_len,
                                bool do_endian_swap,
                                bool data_alloc,
                                const char **r_error_message);
void DNA_sdna_free(struct SDNA *sdna);

/* Access for current Dune versions SDNA. */
void structs_sdna_current_init(void);
/* borrowed reference */
const struct SDNA *sttucts_sdna_current_get(void);
void structs_sdna_current_free(void);

struct structs_ReconstructInfo;
/**
 * Pre-process information about how structs in \a newsdna can be reconstructed from structs in
 * \a oldsdna. This information is then used to speedup #structs_struct_reconstruct.
 */
struct structs_ReconstructInfo *DNA_reconstruct_info_create(const struct SDNA *oldsdna,
                                                        const struct SDNA *newsdna,
                                                        const char *compare_flags);
void structs_reconstruct_info_free(struct structs_ReconstructInfo *reconstruct_info);

/**
 * Returns the index of the struct info for the struct with the specified name.
 */
int structs_struct_find_nr_ex(const struct SDNA *sdna, const char *str, unsigned int *index_last);
int structs_struct_find_nr(const struct SDNA *sdna, const char *str);
/**
 * Does endian swapping on the fields of a struct value.
 *
 * param sdna: SDNA of the struct_nr belongs to
 * param struct_nr: Index of struct info within sdna
 * param data: Struct data that is to be converted
 */
void structs_struct_switch_endian(const struct SDNA *sdna, int struct_nr, char *data);
/**
 * Constructs and returns an array of byte flags with one element for each struct in oldsdna,
 * indicating how it compares to newsdna.
 */
const char *structs_struct_get_compareflags(const struct SDNA *sdna, const struct SDNA *newsdna);
/**
 * param reconstruct_info: Information preprocessed by #DNA_reconstruct_info_create.
 * param old_struct_nr: Index of struct info within oldsdna.
 * param blocks: The number of array elements.
 * param old_blocks: Array of struct data.
 * return An allocated reconstructed struct.
 */
void *structs_struct_reconstruct(const struct DNA_ReconstructInfo *reconstruct_info,
                             int old_struct_nr,
                             int blocks,
                             const void *old_blocks);

/**
 * Returns the offset of the field with the specified name and type within the specified
 * struct type in #SDNA, -1 on failure.
 */
int structs_elem_offset(struct SDNA *sdna, const char *stype, const char *vartype, const char *name);

/**
 * Returns the size of struct fields of the specified type and name.
 *
 * param type: Index into sdna->types/types_size
 * param name: Index into sdna->names,
 * needed to extract possible pointer/array information.
 */
int structs_elem_size_nr(const struct SDNA *sdna, short type, short name);

bool structs_struct_find(const struct SDNA *sdna, const char *stype);
bool structs_struct_elem_find(const struct SDNA *sdna,
                          const char *stype,
                          const char *vartype,
                          const char *name);

/**
 * Returns the size in bytes of a primitive type.
 */
int structs_elem_type_size(eSDNA_Type elem_nr);

/**
 * Rename a struct
 */
bool structs_sdna_patch_struct(struct SDNA *sdna,
                           const char *struct_name_old,
                           const char *struct_name_new);
/**
 * Replace \a elem_old with \a elem_new for struct \a struct_name
 * handles search & replace, maintaining surrounding non-identifier characters
 * such as pointer & array size.
 */
bool structs_sdna_patch_struct_member(struct SDNA *sdna,
                                  const char *struct_name,
                                  const char *elem_old,
                                  const char *elem_new);

void structs_sdna_alias_data_ensure(struct SDNA *sdna);

/* Alias lookups (using runtime struct member names). */

/**
 * note requires #structs_sdna_alias_data_ensure_structs_map to be called.
 */
int structs_struct_alias_find_nr_ex(const struct SDNA *sdna,
                                const char *str,
                                unsigned int *index_last);
/**
 * note requires #structs_sdna_alias_data_ensure_structs_map to be called.
 */
int structs_struct_alias_find_nr(const struct SDNA *sdna, const char *str);
/**
 * note requires #structs_sdna_alias_data_ensure_structs_map to be called.
 */
bool structs_struct_alias_elem_find(const struct SDNA *sdna,
                                const char *stype,
                                const char *vartype,
                                const char *name);
/**
 * Separated from #structs_sdna_alias_data_ensure because it's not needed
 * unless we want to lookup aliased struct names (#structs_struct_alias_find_nr and friends).
 */
void structs_sdna_alias_data_ensure_structs_map(struct SDNA *sdna);
